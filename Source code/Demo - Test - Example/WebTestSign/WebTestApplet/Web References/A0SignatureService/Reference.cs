//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace WebTestApplet.A0SignatureService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CAServiceSoap", Namespace="http://ca-nldc.vn/")]
    public partial class CAService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUnitInCASystem_NowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCertificateFromProgUser_NowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserCerticateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateCertificateInCA_NowOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateCertificateInCA_DateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateCertificateInTTD_NowOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateAndGetFileInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFile_WithHashOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFileStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogFileSignatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFL_File_SelectFileIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback FL_FileRelation_InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignFilesByID_ReturnDetails6OperationCompleted;
        
        private System.Threading.SendOrPostCallback SignFilesByID_ReturnDetails61OperationCompleted;
        
        private System.Threading.SendOrPostCallback SignFilesByID_SendToClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignFilesByID_ReceiveFromClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback FL_File_SelectForAllowSign_ArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback FL_File_SelectForSaveSignOperationCompleted;
        
        private System.Threading.SendOrPostCallback FL_File_UpdateForLogSignOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckLoginHSM_TestLoginFailedOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CAService() {
            this.Url = global::WebTestApplet.Properties.Settings.Default.WebTestApplet_A0SignatureService_CAService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event CheckUnitInCASystem_NowCompletedEventHandler CheckUnitInCASystem_NowCompleted;
        
        /// <remarks/>
        public event GetCertificateFromProgUser_NowCompletedEventHandler GetCertificateFromProgUser_NowCompleted;
        
        /// <remarks/>
        public event GetUserCerticateCompletedEventHandler GetUserCerticateCompleted;
        
        /// <remarks/>
        public event ValidateCertificateInCA_NowCompletedEventHandler ValidateCertificateInCA_NowCompleted;
        
        /// <remarks/>
        public event ValidateCertificateInCA_DateCompletedEventHandler ValidateCertificateInCA_DateCompleted;
        
        /// <remarks/>
        public event ValidateCertificateInTTD_NowCompletedEventHandler ValidateCertificateInTTD_NowCompleted;
        
        /// <remarks/>
        public event CreateAndGetFileInfoCompletedEventHandler CreateAndGetFileInfoCompleted;
        
        /// <remarks/>
        public event GetFileInfoCompletedEventHandler GetFileInfoCompleted;
        
        /// <remarks/>
        public event SaveFile_WithHashCompletedEventHandler SaveFile_WithHashCompleted;
        
        /// <remarks/>
        public event SetFileStatusCompletedEventHandler SetFileStatusCompleted;
        
        /// <remarks/>
        public event LogFileSignatureCompletedEventHandler LogFileSignatureCompleted;
        
        /// <remarks/>
        public event GetFL_File_SelectFileIDCompletedEventHandler GetFL_File_SelectFileIDCompleted;
        
        /// <remarks/>
        public event FL_FileRelation_InsertCompletedEventHandler FL_FileRelation_InsertCompleted;
        
        /// <remarks/>
        public event SignFilesByID_ReturnDetails6CompletedEventHandler SignFilesByID_ReturnDetails6Completed;
        
        /// <remarks/>
        public event SignFilesByID_ReturnDetails61CompletedEventHandler SignFilesByID_ReturnDetails61Completed;
        
        /// <remarks/>
        public event SignFilesByID_SendToClientCompletedEventHandler SignFilesByID_SendToClientCompleted;
        
        /// <remarks/>
        public event SignFilesByID_ReceiveFromClientCompletedEventHandler SignFilesByID_ReceiveFromClientCompleted;
        
        /// <remarks/>
        public event FL_File_SelectForAllowSign_ArrayCompletedEventHandler FL_File_SelectForAllowSign_ArrayCompleted;
        
        /// <remarks/>
        public event FL_File_SelectForSaveSignCompletedEventHandler FL_File_SelectForSaveSignCompleted;
        
        /// <remarks/>
        public event FL_File_UpdateForLogSignCompletedEventHandler FL_File_UpdateForLogSignCompleted;
        
        /// <remarks/>
        public event CheckLoginHSM_TestLoginFailedCompletedEventHandler CheckLoginHSM_TestLoginFailedCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/HelloWorld", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/CheckUnitInCASystem_Now", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckUnitInCASystem_Now(int UnitTypeID, string maDV, string programName) {
            object[] results = this.Invoke("CheckUnitInCASystem_Now", new object[] {
                        UnitTypeID,
                        maDV,
                        programName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUnitInCASystem_NowAsync(int UnitTypeID, string maDV, string programName) {
            this.CheckUnitInCASystem_NowAsync(UnitTypeID, maDV, programName, null);
        }
        
        /// <remarks/>
        public void CheckUnitInCASystem_NowAsync(int UnitTypeID, string maDV, string programName, object userState) {
            if ((this.CheckUnitInCASystem_NowOperationCompleted == null)) {
                this.CheckUnitInCASystem_NowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUnitInCASystem_NowOperationCompleted);
            }
            this.InvokeAsync("CheckUnitInCASystem_Now", new object[] {
                        UnitTypeID,
                        maDV,
                        programName}, this.CheckUnitInCASystem_NowOperationCompleted, userState);
        }
        
        private void OnCheckUnitInCASystem_NowOperationCompleted(object arg) {
            if ((this.CheckUnitInCASystem_NowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUnitInCASystem_NowCompleted(this, new CheckUnitInCASystem_NowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/GetCertificateFromProgUser_Now", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public byte[][] GetCertificateFromProgUser_Now(string programName, string userName) {
            object[] results = this.Invoke("GetCertificateFromProgUser_Now", new object[] {
                        programName,
                        userName});
            return ((byte[][])(results[0]));
        }
        
        /// <remarks/>
        public void GetCertificateFromProgUser_NowAsync(string programName, string userName) {
            this.GetCertificateFromProgUser_NowAsync(programName, userName, null);
        }
        
        /// <remarks/>
        public void GetCertificateFromProgUser_NowAsync(string programName, string userName, object userState) {
            if ((this.GetCertificateFromProgUser_NowOperationCompleted == null)) {
                this.GetCertificateFromProgUser_NowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertificateFromProgUser_NowOperationCompleted);
            }
            this.InvokeAsync("GetCertificateFromProgUser_Now", new object[] {
                        programName,
                        userName}, this.GetCertificateFromProgUser_NowOperationCompleted, userState);
        }
        
        private void OnGetCertificateFromProgUser_NowOperationCompleted(object arg) {
            if ((this.GetCertificateFromProgUser_NowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertificateFromProgUser_NowCompleted(this, new GetCertificateFromProgUser_NowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/GetUserCerticate", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetUserCerticate(string programName, string userName) {
            object[] results = this.Invoke("GetUserCerticate", new object[] {
                        programName,
                        userName});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserCerticateAsync(string programName, string userName) {
            this.GetUserCerticateAsync(programName, userName, null);
        }
        
        /// <remarks/>
        public void GetUserCerticateAsync(string programName, string userName, object userState) {
            if ((this.GetUserCerticateOperationCompleted == null)) {
                this.GetUserCerticateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCerticateOperationCompleted);
            }
            this.InvokeAsync("GetUserCerticate", new object[] {
                        programName,
                        userName}, this.GetUserCerticateOperationCompleted, userState);
        }
        
        private void OnGetUserCerticateOperationCompleted(object arg) {
            if ((this.GetUserCerticateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCerticateCompleted(this, new GetUserCerticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/ValidateCertificateInCA_Now", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateCertificateInCA_Now([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] certRawData, out CertificateStatus_CA certificateStatus) {
            object[] results = this.Invoke("ValidateCertificateInCA_Now", new object[] {
                        certRawData});
            certificateStatus = ((CertificateStatus_CA)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateCertificateInCA_NowAsync(byte[] certRawData) {
            this.ValidateCertificateInCA_NowAsync(certRawData, null);
        }
        
        /// <remarks/>
        public void ValidateCertificateInCA_NowAsync(byte[] certRawData, object userState) {
            if ((this.ValidateCertificateInCA_NowOperationCompleted == null)) {
                this.ValidateCertificateInCA_NowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateCertificateInCA_NowOperationCompleted);
            }
            this.InvokeAsync("ValidateCertificateInCA_Now", new object[] {
                        certRawData}, this.ValidateCertificateInCA_NowOperationCompleted, userState);
        }
        
        private void OnValidateCertificateInCA_NowOperationCompleted(object arg) {
            if ((this.ValidateCertificateInCA_NowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCertificateInCA_NowCompleted(this, new ValidateCertificateInCA_NowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/ValidateCertificateInCA_Date", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateCertificateInCA_Date([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] certRawData, System.DateTime validateTime, out CertificateStatus_CA certificateStatus) {
            object[] results = this.Invoke("ValidateCertificateInCA_Date", new object[] {
                        certRawData,
                        validateTime});
            certificateStatus = ((CertificateStatus_CA)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateCertificateInCA_DateAsync(byte[] certRawData, System.DateTime validateTime) {
            this.ValidateCertificateInCA_DateAsync(certRawData, validateTime, null);
        }
        
        /// <remarks/>
        public void ValidateCertificateInCA_DateAsync(byte[] certRawData, System.DateTime validateTime, object userState) {
            if ((this.ValidateCertificateInCA_DateOperationCompleted == null)) {
                this.ValidateCertificateInCA_DateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateCertificateInCA_DateOperationCompleted);
            }
            this.InvokeAsync("ValidateCertificateInCA_Date", new object[] {
                        certRawData,
                        validateTime}, this.ValidateCertificateInCA_DateOperationCompleted, userState);
        }
        
        private void OnValidateCertificateInCA_DateOperationCompleted(object arg) {
            if ((this.ValidateCertificateInCA_DateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCertificateInCA_DateCompleted(this, new ValidateCertificateInCA_DateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/ValidateCertificateInTTD_Now", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateCertificateInTTD_Now(string programName, string userName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] certRawData, out CertificateStatus_TTD certificateStatus) {
            object[] results = this.Invoke("ValidateCertificateInTTD_Now", new object[] {
                        programName,
                        userName,
                        certRawData});
            certificateStatus = ((CertificateStatus_TTD)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateCertificateInTTD_NowAsync(string programName, string userName, byte[] certRawData) {
            this.ValidateCertificateInTTD_NowAsync(programName, userName, certRawData, null);
        }
        
        /// <remarks/>
        public void ValidateCertificateInTTD_NowAsync(string programName, string userName, byte[] certRawData, object userState) {
            if ((this.ValidateCertificateInTTD_NowOperationCompleted == null)) {
                this.ValidateCertificateInTTD_NowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateCertificateInTTD_NowOperationCompleted);
            }
            this.InvokeAsync("ValidateCertificateInTTD_Now", new object[] {
                        programName,
                        userName,
                        certRawData}, this.ValidateCertificateInTTD_NowOperationCompleted, userState);
        }
        
        private void OnValidateCertificateInTTD_NowOperationCompleted(object arg) {
            if ((this.ValidateCertificateInTTD_NowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCertificateInTTD_NowCompleted(this, new ValidateCertificateInTTD_NowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/CreateAndGetFileInfo", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public FileInfoCA CreateAndGetFileInfo(string programName, string userName, int FileTypeID, string FileMaDV, System.DateTime FileDate, string FileName, string Description, ref string strError) {
            object[] results = this.Invoke("CreateAndGetFileInfo", new object[] {
                        programName,
                        userName,
                        FileTypeID,
                        FileMaDV,
                        FileDate,
                        FileName,
                        Description,
                        strError});
            strError = ((string)(results[1]));
            return ((FileInfoCA)(results[0]));
        }
        
        /// <remarks/>
        public void CreateAndGetFileInfoAsync(string programName, string userName, int FileTypeID, string FileMaDV, System.DateTime FileDate, string FileName, string Description, string strError) {
            this.CreateAndGetFileInfoAsync(programName, userName, FileTypeID, FileMaDV, FileDate, FileName, Description, strError, null);
        }
        
        /// <remarks/>
        public void CreateAndGetFileInfoAsync(string programName, string userName, int FileTypeID, string FileMaDV, System.DateTime FileDate, string FileName, string Description, string strError, object userState) {
            if ((this.CreateAndGetFileInfoOperationCompleted == null)) {
                this.CreateAndGetFileInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAndGetFileInfoOperationCompleted);
            }
            this.InvokeAsync("CreateAndGetFileInfo", new object[] {
                        programName,
                        userName,
                        FileTypeID,
                        FileMaDV,
                        FileDate,
                        FileName,
                        Description,
                        strError}, this.CreateAndGetFileInfoOperationCompleted, userState);
        }
        
        private void OnCreateAndGetFileInfoOperationCompleted(object arg) {
            if ((this.CreateAndGetFileInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateAndGetFileInfoCompleted(this, new CreateAndGetFileInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/GetFileInfo", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public FileInfoCA GetFileInfo(int fileID, ref string strError) {
            object[] results = this.Invoke("GetFileInfo", new object[] {
                        fileID,
                        strError});
            strError = ((string)(results[1]));
            return ((FileInfoCA)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileInfoAsync(int fileID, string strError) {
            this.GetFileInfoAsync(fileID, strError, null);
        }
        
        /// <remarks/>
        public void GetFileInfoAsync(int fileID, string strError, object userState) {
            if ((this.GetFileInfoOperationCompleted == null)) {
                this.GetFileInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileInfoOperationCompleted);
            }
            this.InvokeAsync("GetFileInfo", new object[] {
                        fileID,
                        strError}, this.GetFileInfoOperationCompleted, userState);
        }
        
        private void OnGetFileInfoOperationCompleted(object arg) {
            if ((this.GetFileInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileInfoCompleted(this, new GetFileInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/SaveFile_WithHash", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveFile_WithHash(int fileID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileData, string programName, string userName, ref string strError) {
            object[] results = this.Invoke("SaveFile_WithHash", new object[] {
                        fileID,
                        fileData,
                        programName,
                        userName,
                        strError});
            strError = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFile_WithHashAsync(int fileID, byte[] fileData, string programName, string userName, string strError) {
            this.SaveFile_WithHashAsync(fileID, fileData, programName, userName, strError, null);
        }
        
        /// <remarks/>
        public void SaveFile_WithHashAsync(int fileID, byte[] fileData, string programName, string userName, string strError, object userState) {
            if ((this.SaveFile_WithHashOperationCompleted == null)) {
                this.SaveFile_WithHashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFile_WithHashOperationCompleted);
            }
            this.InvokeAsync("SaveFile_WithHash", new object[] {
                        fileID,
                        fileData,
                        programName,
                        userName,
                        strError}, this.SaveFile_WithHashOperationCompleted, userState);
        }
        
        private void OnSaveFile_WithHashOperationCompleted(object arg) {
            if ((this.SaveFile_WithHashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFile_WithHashCompleted(this, new SaveFile_WithHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/SetFileStatus", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetFileStatus(int fileID, int fileStatus, string reason, string programName, string userName) {
            object[] results = this.Invoke("SetFileStatus", new object[] {
                        fileID,
                        fileStatus,
                        reason,
                        programName,
                        userName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetFileStatusAsync(int fileID, int fileStatus, string reason, string programName, string userName) {
            this.SetFileStatusAsync(fileID, fileStatus, reason, programName, userName, null);
        }
        
        /// <remarks/>
        public void SetFileStatusAsync(int fileID, int fileStatus, string reason, string programName, string userName, object userState) {
            if ((this.SetFileStatusOperationCompleted == null)) {
                this.SetFileStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFileStatusOperationCompleted);
            }
            this.InvokeAsync("SetFileStatus", new object[] {
                        fileID,
                        fileStatus,
                        reason,
                        programName,
                        userName}, this.SetFileStatusOperationCompleted, userState);
        }
        
        private void OnSetFileStatusOperationCompleted(object arg) {
            if ((this.SetFileStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFileStatusCompleted(this, new SetFileStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/LogFileSignature", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LogFileSignature(int fileID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] certRawData, System.DateTime signTime, int verify, int fileSignActions, string programName, string userName) {
            object[] results = this.Invoke("LogFileSignature", new object[] {
                        fileID,
                        certRawData,
                        signTime,
                        verify,
                        fileSignActions,
                        programName,
                        userName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LogFileSignatureAsync(int fileID, byte[] certRawData, System.DateTime signTime, int verify, int fileSignActions, string programName, string userName) {
            this.LogFileSignatureAsync(fileID, certRawData, signTime, verify, fileSignActions, programName, userName, null);
        }
        
        /// <remarks/>
        public void LogFileSignatureAsync(int fileID, byte[] certRawData, System.DateTime signTime, int verify, int fileSignActions, string programName, string userName, object userState) {
            if ((this.LogFileSignatureOperationCompleted == null)) {
                this.LogFileSignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogFileSignatureOperationCompleted);
            }
            this.InvokeAsync("LogFileSignature", new object[] {
                        fileID,
                        certRawData,
                        signTime,
                        verify,
                        fileSignActions,
                        programName,
                        userName}, this.LogFileSignatureOperationCompleted, userState);
        }
        
        private void OnLogFileSignatureOperationCompleted(object arg) {
            if ((this.LogFileSignatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogFileSignatureCompleted(this, new LogFileSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/GetFL_File_SelectFileID", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetFL_File_SelectFileID(System.DateTime TuNgay, System.DateTime DenNgay, string Ma_NM, int FileTypeID) {
            object[] results = this.Invoke("GetFL_File_SelectFileID", new object[] {
                        TuNgay,
                        DenNgay,
                        Ma_NM,
                        FileTypeID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetFL_File_SelectFileIDAsync(System.DateTime TuNgay, System.DateTime DenNgay, string Ma_NM, int FileTypeID) {
            this.GetFL_File_SelectFileIDAsync(TuNgay, DenNgay, Ma_NM, FileTypeID, null);
        }
        
        /// <remarks/>
        public void GetFL_File_SelectFileIDAsync(System.DateTime TuNgay, System.DateTime DenNgay, string Ma_NM, int FileTypeID, object userState) {
            if ((this.GetFL_File_SelectFileIDOperationCompleted == null)) {
                this.GetFL_File_SelectFileIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFL_File_SelectFileIDOperationCompleted);
            }
            this.InvokeAsync("GetFL_File_SelectFileID", new object[] {
                        TuNgay,
                        DenNgay,
                        Ma_NM,
                        FileTypeID}, this.GetFL_File_SelectFileIDOperationCompleted, userState);
        }
        
        private void OnGetFL_File_SelectFileIDOperationCompleted(object arg) {
            if ((this.GetFL_File_SelectFileIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFL_File_SelectFileIDCompleted(this, new GetFL_File_SelectFileIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/FL_FileRelation_Insert", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FL_FileRelation_Insert(int FileID_A, int FileID_B, int FileRelationTypeID, string programName, string userName) {
            object[] results = this.Invoke("FL_FileRelation_Insert", new object[] {
                        FileID_A,
                        FileID_B,
                        FileRelationTypeID,
                        programName,
                        userName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FL_FileRelation_InsertAsync(int FileID_A, int FileID_B, int FileRelationTypeID, string programName, string userName) {
            this.FL_FileRelation_InsertAsync(FileID_A, FileID_B, FileRelationTypeID, programName, userName, null);
        }
        
        /// <remarks/>
        public void FL_FileRelation_InsertAsync(int FileID_A, int FileID_B, int FileRelationTypeID, string programName, string userName, object userState) {
            if ((this.FL_FileRelation_InsertOperationCompleted == null)) {
                this.FL_FileRelation_InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFL_FileRelation_InsertOperationCompleted);
            }
            this.InvokeAsync("FL_FileRelation_Insert", new object[] {
                        FileID_A,
                        FileID_B,
                        FileRelationTypeID,
                        programName,
                        userName}, this.FL_FileRelation_InsertOperationCompleted, userState);
        }
        
        private void OnFL_FileRelation_InsertOperationCompleted(object arg) {
            if ((this.FL_FileRelation_InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FL_FileRelation_InsertCompleted(this, new FL_FileRelation_InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/1.SignFilesByID_ReturnDetail_NoApp", RequestElementName="1.SignFilesByID_ReturnDetail_NoApp", RequestNamespace="http://ca-nldc.vn/", ResponseElementName="1.SignFilesByID_ReturnDetail_NoAppResponse", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("1.SignFilesByID_ReturnDetail_NoAppResult")]
        public bool SignFilesByID_ReturnDetails6(int[] fileIDs, string programName, string userName, string password, ref System.Data.DataTable dtResult, ref string strError) {
            object[] results = this.Invoke("SignFilesByID_ReturnDetails6", new object[] {
                        fileIDs,
                        programName,
                        userName,
                        password,
                        dtResult,
                        strError});
            dtResult = ((System.Data.DataTable)(results[1]));
            strError = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SignFilesByID_ReturnDetails6Async(int[] fileIDs, string programName, string userName, string password, System.Data.DataTable dtResult, string strError) {
            this.SignFilesByID_ReturnDetails6Async(fileIDs, programName, userName, password, dtResult, strError, null);
        }
        
        /// <remarks/>
        public void SignFilesByID_ReturnDetails6Async(int[] fileIDs, string programName, string userName, string password, System.Data.DataTable dtResult, string strError, object userState) {
            if ((this.SignFilesByID_ReturnDetails6OperationCompleted == null)) {
                this.SignFilesByID_ReturnDetails6OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignFilesByID_ReturnDetails6OperationCompleted);
            }
            this.InvokeAsync("SignFilesByID_ReturnDetails6", new object[] {
                        fileIDs,
                        programName,
                        userName,
                        password,
                        dtResult,
                        strError}, this.SignFilesByID_ReturnDetails6OperationCompleted, userState);
        }
        
        private void OnSignFilesByID_ReturnDetails6OperationCompleted(object arg) {
            if ((this.SignFilesByID_ReturnDetails6Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignFilesByID_ReturnDetails6Completed(this, new SignFilesByID_ReturnDetails6CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="SignFilesByID_ReturnDetails61")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/2.SignFilesByID_ReturnDetail_NoApp", RequestElementName="2.SignFilesByID_ReturnDetail_NoApp", RequestNamespace="http://ca-nldc.vn/", ResponseElementName="2.SignFilesByID_ReturnDetail_NoAppResponse", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("2.SignFilesByID_ReturnDetail_NoAppResult")]
        public bool SignFilesByID_ReturnDetails6(string arrFileIDs, string programName, string userName, string password, ref System.Data.DataTable dtResult, ref string strError) {
            object[] results = this.Invoke("SignFilesByID_ReturnDetails61", new object[] {
                        arrFileIDs,
                        programName,
                        userName,
                        password,
                        dtResult,
                        strError});
            dtResult = ((System.Data.DataTable)(results[1]));
            strError = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SignFilesByID_ReturnDetails61Async(string arrFileIDs, string programName, string userName, string password, System.Data.DataTable dtResult, string strError) {
            this.SignFilesByID_ReturnDetails61Async(arrFileIDs, programName, userName, password, dtResult, strError, null);
        }
        
        /// <remarks/>
        public void SignFilesByID_ReturnDetails61Async(string arrFileIDs, string programName, string userName, string password, System.Data.DataTable dtResult, string strError, object userState) {
            if ((this.SignFilesByID_ReturnDetails61OperationCompleted == null)) {
                this.SignFilesByID_ReturnDetails61OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignFilesByID_ReturnDetails61OperationCompleted);
            }
            this.InvokeAsync("SignFilesByID_ReturnDetails61", new object[] {
                        arrFileIDs,
                        programName,
                        userName,
                        password,
                        dtResult,
                        strError}, this.SignFilesByID_ReturnDetails61OperationCompleted, userState);
        }
        
        private void OnSignFilesByID_ReturnDetails61OperationCompleted(object arg) {
            if ((this.SignFilesByID_ReturnDetails61Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignFilesByID_ReturnDetails61Completed(this, new SignFilesByID_ReturnDetails61CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/3.SignFilesByID_SendToClient", RequestElementName="3.SignFilesByID_SendToClient", RequestNamespace="http://ca-nldc.vn/", ResponseElementName="3.SignFilesByID_SendToClientResponse", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("3.SignFilesByID_SendToClientResult")]
        public bool SignFilesByID_SendToClient(string arrFileIDs, string programName, string userName, ref System.Data.DataTable dtResult, ref string strError) {
            object[] results = this.Invoke("SignFilesByID_SendToClient", new object[] {
                        arrFileIDs,
                        programName,
                        userName,
                        dtResult,
                        strError});
            dtResult = ((System.Data.DataTable)(results[1]));
            strError = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SignFilesByID_SendToClientAsync(string arrFileIDs, string programName, string userName, System.Data.DataTable dtResult, string strError) {
            this.SignFilesByID_SendToClientAsync(arrFileIDs, programName, userName, dtResult, strError, null);
        }
        
        /// <remarks/>
        public void SignFilesByID_SendToClientAsync(string arrFileIDs, string programName, string userName, System.Data.DataTable dtResult, string strError, object userState) {
            if ((this.SignFilesByID_SendToClientOperationCompleted == null)) {
                this.SignFilesByID_SendToClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignFilesByID_SendToClientOperationCompleted);
            }
            this.InvokeAsync("SignFilesByID_SendToClient", new object[] {
                        arrFileIDs,
                        programName,
                        userName,
                        dtResult,
                        strError}, this.SignFilesByID_SendToClientOperationCompleted, userState);
        }
        
        private void OnSignFilesByID_SendToClientOperationCompleted(object arg) {
            if ((this.SignFilesByID_SendToClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignFilesByID_SendToClientCompleted(this, new SignFilesByID_SendToClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/4.SignFilesByID_ReceiveFromClient", RequestElementName="4.SignFilesByID_ReceiveFromClient", RequestNamespace="http://ca-nldc.vn/", ResponseElementName="4.SignFilesByID_ReceiveFromClientResponse", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("4.SignFilesByID_ReceiveFromClientResult")]
        public bool SignFilesByID_ReceiveFromClient(string programName, string userName, ref System.Data.DataTable dtResult, ref string strError) {
            object[] results = this.Invoke("SignFilesByID_ReceiveFromClient", new object[] {
                        programName,
                        userName,
                        dtResult,
                        strError});
            dtResult = ((System.Data.DataTable)(results[1]));
            strError = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SignFilesByID_ReceiveFromClientAsync(string programName, string userName, System.Data.DataTable dtResult, string strError) {
            this.SignFilesByID_ReceiveFromClientAsync(programName, userName, dtResult, strError, null);
        }
        
        /// <remarks/>
        public void SignFilesByID_ReceiveFromClientAsync(string programName, string userName, System.Data.DataTable dtResult, string strError, object userState) {
            if ((this.SignFilesByID_ReceiveFromClientOperationCompleted == null)) {
                this.SignFilesByID_ReceiveFromClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignFilesByID_ReceiveFromClientOperationCompleted);
            }
            this.InvokeAsync("SignFilesByID_ReceiveFromClient", new object[] {
                        programName,
                        userName,
                        dtResult,
                        strError}, this.SignFilesByID_ReceiveFromClientOperationCompleted, userState);
        }
        
        private void OnSignFilesByID_ReceiveFromClientOperationCompleted(object arg) {
            if ((this.SignFilesByID_ReceiveFromClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignFilesByID_ReceiveFromClientCompleted(this, new SignFilesByID_ReceiveFromClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/FL_File_SelectForAllowSign_Array", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FL_File_SelectForAllowSign_Array(string arrFileID, string programName, string userName, ref System.Data.DataTable dtFileInfo) {
            object[] results = this.Invoke("FL_File_SelectForAllowSign_Array", new object[] {
                        arrFileID,
                        programName,
                        userName,
                        dtFileInfo});
            dtFileInfo = ((System.Data.DataTable)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FL_File_SelectForAllowSign_ArrayAsync(string arrFileID, string programName, string userName, System.Data.DataTable dtFileInfo) {
            this.FL_File_SelectForAllowSign_ArrayAsync(arrFileID, programName, userName, dtFileInfo, null);
        }
        
        /// <remarks/>
        public void FL_File_SelectForAllowSign_ArrayAsync(string arrFileID, string programName, string userName, System.Data.DataTable dtFileInfo, object userState) {
            if ((this.FL_File_SelectForAllowSign_ArrayOperationCompleted == null)) {
                this.FL_File_SelectForAllowSign_ArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFL_File_SelectForAllowSign_ArrayOperationCompleted);
            }
            this.InvokeAsync("FL_File_SelectForAllowSign_Array", new object[] {
                        arrFileID,
                        programName,
                        userName,
                        dtFileInfo}, this.FL_File_SelectForAllowSign_ArrayOperationCompleted, userState);
        }
        
        private void OnFL_File_SelectForAllowSign_ArrayOperationCompleted(object arg) {
            if ((this.FL_File_SelectForAllowSign_ArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FL_File_SelectForAllowSign_ArrayCompleted(this, new FL_File_SelectForAllowSign_ArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/FL_File_SelectForSaveSign", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FL_File_SelectForSaveSign(int id_StatusLog) {
            object[] results = this.Invoke("FL_File_SelectForSaveSign", new object[] {
                        id_StatusLog});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FL_File_SelectForSaveSignAsync(int id_StatusLog) {
            this.FL_File_SelectForSaveSignAsync(id_StatusLog, null);
        }
        
        /// <remarks/>
        public void FL_File_SelectForSaveSignAsync(int id_StatusLog, object userState) {
            if ((this.FL_File_SelectForSaveSignOperationCompleted == null)) {
                this.FL_File_SelectForSaveSignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFL_File_SelectForSaveSignOperationCompleted);
            }
            this.InvokeAsync("FL_File_SelectForSaveSign", new object[] {
                        id_StatusLog}, this.FL_File_SelectForSaveSignOperationCompleted, userState);
        }
        
        private void OnFL_File_SelectForSaveSignOperationCompleted(object arg) {
            if ((this.FL_File_SelectForSaveSignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FL_File_SelectForSaveSignCompleted(this, new FL_File_SelectForSaveSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/FL_File_UpdateForLogSign", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FL_File_UpdateForLogSign(int fileID, string certSerial, System.DateTime signTime, int verify, int fileSignActions, string backupPath, string reason, string programName, string userName) {
            object[] results = this.Invoke("FL_File_UpdateForLogSign", new object[] {
                        fileID,
                        certSerial,
                        signTime,
                        verify,
                        fileSignActions,
                        backupPath,
                        reason,
                        programName,
                        userName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FL_File_UpdateForLogSignAsync(int fileID, string certSerial, System.DateTime signTime, int verify, int fileSignActions, string backupPath, string reason, string programName, string userName) {
            this.FL_File_UpdateForLogSignAsync(fileID, certSerial, signTime, verify, fileSignActions, backupPath, reason, programName, userName, null);
        }
        
        /// <remarks/>
        public void FL_File_UpdateForLogSignAsync(int fileID, string certSerial, System.DateTime signTime, int verify, int fileSignActions, string backupPath, string reason, string programName, string userName, object userState) {
            if ((this.FL_File_UpdateForLogSignOperationCompleted == null)) {
                this.FL_File_UpdateForLogSignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFL_File_UpdateForLogSignOperationCompleted);
            }
            this.InvokeAsync("FL_File_UpdateForLogSign", new object[] {
                        fileID,
                        certSerial,
                        signTime,
                        verify,
                        fileSignActions,
                        backupPath,
                        reason,
                        programName,
                        userName}, this.FL_File_UpdateForLogSignOperationCompleted, userState);
        }
        
        private void OnFL_File_UpdateForLogSignOperationCompleted(object arg) {
            if ((this.FL_File_UpdateForLogSignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FL_File_UpdateForLogSignCompleted(this, new FL_File_UpdateForLogSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ca-nldc.vn/CheckLoginHSM_TestLoginFailed", RequestNamespace="http://ca-nldc.vn/", ResponseNamespace="http://ca-nldc.vn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckLoginHSM_TestLoginFailed(string programName, string userName, string password) {
            object[] results = this.Invoke("CheckLoginHSM_TestLoginFailed", new object[] {
                        programName,
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckLoginHSM_TestLoginFailedAsync(string programName, string userName, string password) {
            this.CheckLoginHSM_TestLoginFailedAsync(programName, userName, password, null);
        }
        
        /// <remarks/>
        public void CheckLoginHSM_TestLoginFailedAsync(string programName, string userName, string password, object userState) {
            if ((this.CheckLoginHSM_TestLoginFailedOperationCompleted == null)) {
                this.CheckLoginHSM_TestLoginFailedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckLoginHSM_TestLoginFailedOperationCompleted);
            }
            this.InvokeAsync("CheckLoginHSM_TestLoginFailed", new object[] {
                        programName,
                        userName,
                        password}, this.CheckLoginHSM_TestLoginFailedOperationCompleted, userState);
        }
        
        private void OnCheckLoginHSM_TestLoginFailedOperationCompleted(object arg) {
            if ((this.CheckLoginHSM_TestLoginFailedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckLoginHSM_TestLoginFailedCompleted(this, new CheckLoginHSM_TestLoginFailedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ca-nldc.vn/")]
    public partial class CertificateStatus_CA {
        
        private int statusField;
        
        private string statusInformationField;
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string StatusInformation {
            get {
                return this.statusInformationField;
            }
            set {
                this.statusInformationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ca-nldc.vn/")]
    public partial class FileInfoCA {
        
        private int fileIDField;
        
        private string fileNumberField;
        
        private string filePathField;
        
        private int fileTypeIDField;
        
        private string maDVField;
        
        private System.DateTime fileDateField;
        
        private int statusField;
        
        private string descriptionField;
        
        /// <remarks/>
        public int FileID {
            get {
                return this.fileIDField;
            }
            set {
                this.fileIDField = value;
            }
        }
        
        /// <remarks/>
        public string FileNumber {
            get {
                return this.fileNumberField;
            }
            set {
                this.fileNumberField = value;
            }
        }
        
        /// <remarks/>
        public string FilePath {
            get {
                return this.filePathField;
            }
            set {
                this.filePathField = value;
            }
        }
        
        /// <remarks/>
        public int FileTypeID {
            get {
                return this.fileTypeIDField;
            }
            set {
                this.fileTypeIDField = value;
            }
        }
        
        /// <remarks/>
        public string MaDV {
            get {
                return this.maDVField;
            }
            set {
                this.maDVField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime FileDate {
            get {
                return this.fileDateField;
            }
            set {
                this.fileDateField = value;
            }
        }
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ca-nldc.vn/")]
    public partial class CertificateStatus_TTD {
        
        private int statusField;
        
        private string statusInformationField;
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string StatusInformation {
            get {
                return this.statusInformationField;
            }
            set {
                this.statusInformationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CheckUnitInCASystem_NowCompletedEventHandler(object sender, CheckUnitInCASystem_NowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUnitInCASystem_NowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUnitInCASystem_NowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetCertificateFromProgUser_NowCompletedEventHandler(object sender, GetCertificateFromProgUser_NowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertificateFromProgUser_NowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCertificateFromProgUser_NowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[][])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetUserCerticateCompletedEventHandler(object sender, GetUserCerticateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCerticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCerticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ValidateCertificateInCA_NowCompletedEventHandler(object sender, ValidateCertificateInCA_NowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCertificateInCA_NowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCertificateInCA_NowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public CertificateStatus_CA certificateStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CertificateStatus_CA)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ValidateCertificateInCA_DateCompletedEventHandler(object sender, ValidateCertificateInCA_DateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCertificateInCA_DateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCertificateInCA_DateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public CertificateStatus_CA certificateStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CertificateStatus_CA)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ValidateCertificateInTTD_NowCompletedEventHandler(object sender, ValidateCertificateInTTD_NowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCertificateInTTD_NowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCertificateInTTD_NowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public CertificateStatus_TTD certificateStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CertificateStatus_TTD)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CreateAndGetFileInfoCompletedEventHandler(object sender, CreateAndGetFileInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateAndGetFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateAndGetFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileInfoCA Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileInfoCA)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetFileInfoCompletedEventHandler(object sender, GetFileInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileInfoCA Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileInfoCA)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SaveFile_WithHashCompletedEventHandler(object sender, SaveFile_WithHashCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFile_WithHashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFile_WithHashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetFileStatusCompletedEventHandler(object sender, SetFileStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFileStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFileStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LogFileSignatureCompletedEventHandler(object sender, LogFileSignatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogFileSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogFileSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetFL_File_SelectFileIDCompletedEventHandler(object sender, GetFL_File_SelectFileIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFL_File_SelectFileIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFL_File_SelectFileIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void FL_FileRelation_InsertCompletedEventHandler(object sender, FL_FileRelation_InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FL_FileRelation_InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FL_FileRelation_InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SignFilesByID_ReturnDetails6CompletedEventHandler(object sender, SignFilesByID_ReturnDetails6CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignFilesByID_ReturnDetails6CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignFilesByID_ReturnDetails6CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dtResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SignFilesByID_ReturnDetails61CompletedEventHandler(object sender, SignFilesByID_ReturnDetails61CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignFilesByID_ReturnDetails61CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignFilesByID_ReturnDetails61CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dtResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SignFilesByID_SendToClientCompletedEventHandler(object sender, SignFilesByID_SendToClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignFilesByID_SendToClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignFilesByID_SendToClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dtResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SignFilesByID_ReceiveFromClientCompletedEventHandler(object sender, SignFilesByID_ReceiveFromClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignFilesByID_ReceiveFromClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignFilesByID_ReceiveFromClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dtResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void FL_File_SelectForAllowSign_ArrayCompletedEventHandler(object sender, FL_File_SelectForAllowSign_ArrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FL_File_SelectForAllowSign_ArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FL_File_SelectForAllowSign_ArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dtFileInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void FL_File_SelectForSaveSignCompletedEventHandler(object sender, FL_File_SelectForSaveSignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FL_File_SelectForSaveSignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FL_File_SelectForSaveSignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void FL_File_UpdateForLogSignCompletedEventHandler(object sender, FL_File_UpdateForLogSignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FL_File_UpdateForLogSignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FL_File_UpdateForLogSignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CheckLoginHSM_TestLoginFailedCompletedEventHandler(object sender, CheckLoginHSM_TestLoginFailedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckLoginHSM_TestLoginFailedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckLoginHSM_TestLoginFailedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591